#!groovy

/**
 *  Jenkinsfile: catalogador-tfg - Pipeline produccion
 *  @hugo-lorenzo-mato
 */

def appName = 'catalogador-tfg'
def nodeImage = 'node:6.11.1'
//def gradleImage = 'frekele/gradle:4.2.1-jdk8'
def gradleImage = 'frekele/gradle:4.0.2-jdk8'
//def mavenChromeImage = 'markhobson/maven-chrome:latest'
def mavenChromeImage = 'skydever/maven-chrome-certs:latest'
def flywayImage = 'boxfuse/flyway:5'
def gradleImage2 = 'frekele/gradle:4.1-jdk8'


def webProxyPrefixPath = ""
// def webProxyPrefixPath = "${BRANCH_NAME}" /* TODO: Pendiente configuración de proxy */


def db = null
def dbHostname = null
def dbName = 'ggal1701'
def dbUser = 'postgres'
def dbPassword = 'postgres'
def ipTomcat = null

def web = null
def webHostname = null
def npm = tool 'npm'

node() {
    try {
        stage('Git: Checkout') {
            echo 'Checking out git repository'
            sh "git config --global credential.helper 'cache --timeout=3600'"
            checkout scm
        }
/*
        docker.image(nodeImage).inside("-u 0:0") {

            stage('Node: Instalando dependencias') {
                sh "cd appserver/application && npm -v && npm install angular@1.6.5 && node -v && npm install"
            }
            stage('Node: Empaquetado web') {
                sh "cd appserver/application && pwd && npm run build"
            }

        }

        docker.image(gradleImage).inside("-u 0:0") {

            stage('Gradle: Compilando') {
                sh "cd appserver/application && gradle -v && gradle clean war"
            }
            stage ('Gradle: Pruebas Base (unidad - integracion)') {
                sh "cd appserver/application && gradle test"
            }

        }
*/

        stage('Node: Instalando dependencias') {
            npm = tool 'npm'
            sh "cd appserver/application && env && pwd && whoami && ${npm}/npm -v" +
                    " && npm install angular@1.6.5 " +
                    "&& npm -v" +
                    " && npm install"
        }
        stage('Node: Empaquetado web') {
            sh "cd appserver/application && pwd && /opt/bitnami/node/node-v6.11.1-linux-x64/bin/npm run build"

        }

        stage('Gradle: Compilando') {
            sh "cd appserver/application && /opt/bitnami/gradle/gradle-4.0.2/bin/gradle -v && /opt/bitnami/gradle/gradle-4.0.2/bin/gradle clean war"
        }
        stage ('Gradle: Pruebas Base (unidad - integracion)') {
             sh "cd appserver/application && /opt/bitnami/gradle/gradle-4.0.2/bin/gradle test"
        }

        stage ('Despliegue: DB Init') {

            def dbImage = docker.build("catalogador/catalogador-tfg-db:${BRANCH_NAME}","--label jenkins ./database")
            dbHostname = "${BRANCH_NAME}-${BUILD_NUMBER}-db"
            db = dbImage.run("-p 5432:5432 --network public --name ${dbHostname}")
            timeout(time: 3, unit: 'MINUTES') {
                sh "until [ \$(docker logs ${dbHostname} --tail 50 2>&1 | grep 'init process complete' | wc -l) -gt 0 ]; do sleep 10; done"
            }

        }


        stage ('Despliegue: App') {
            def webImage = docker.build("catalogador/catalogador-tfg-app:${BRANCH_NAME}","--label jenkins ./appserver")
            def webJavaOpts = "-Dspring.datasource.url=jdbc:postgresql://${dbHostname}:5432/${dbName} " +
                    "-Dspring.datasource.username=${dbUser} " +
                    "-Dspring.datasource.password=${dbPassword} "
            webHostname = "${BRANCH_NAME}-${BUILD_NUMBER}-app"
            //def proxyOpts = "-l 'traefik.frontend.rule=Host:${testingDomainName};PathPrefixStrip:/${webProxyPrefixPath}'"
            def proxyOpts = "-l 'traefik.frontend.rule=Host:${testingDomainName};PathPrefixStrip:/${webProxyPrefixPath}' " +
                    "-l 'traefik.port=9090'"
            web = webImage.run("-p 9999:8080 -p 9898:80 --network public --link ${dbHostname} --name ${webHostname} -e JAVA_OPTS='${webJavaOpts}' ${proxyOpts}")
            timeout(time: 3, unit: 'MINUTES') {
                sh "until [ \$(docker logs ${webHostname} --tail 50 2>&1 | grep 'Server startup' | wc -l) -gt 0 ]; do sleep 10; done"
            }
        }

        /*
        stage ('Pruebas Integración: Selenium') {
            docker.image(mavenChromeImage).inside("--network public -u 0:0 --link ${webHostname}") {
                sh "cd appserver/application/integration/seleniumTest && mvn -DargLine=' -Durl=http://${webHostname}:8080' clean test"
            }
            junit 'appserver/application/integration/seleniumTest/target/surefire-reports/*.xml'
        }


        docker.image(gradleImage2).inside("--network public -u 0:0") {
            stage('Sonarqube: control de Calidad de Código') {
                sh "cd appserver/application && pwd && gradle sonarqube"
            }

        }

        docker.image(gradleImage).inside("--network public -u 0:0") {
            stage ('Nexus: entrega artefactos') {
                sh "cd appserver/application && gradle upload"

            }
        }

        stage ('Git: Update Stable Tag') {
            VERSION = sh (
                    script: "echo \$(date +%Y%m%d%H%M)-\$(git rev-parse --short HEAD)",
                    returnStdout: true
            ).trim()
            sh "git tag stable-${VERSION}"
            sh "git tag -f stable"
            sh "git push origin :refs/tags/stable" // Remove old stable tag
            sh "git push --tags"
        }
        */
        stage ('Pruebas Aceptación: Decisión') {
            input "Despliegue en la URL: http://${testingDomainName}/${webProxyPrefixPath}"
        }



    } finally {
        web?.stop()
        db?.stop()
    }

}
//-Ddatasource.jdbcUrl=jdbc:postgresql://pg:5432/ggal1701 -Ddatasource.user=postgres -Ddatasource.password=postgres
// sudo docker run --network public --link pg --name tm -e JAVA_OPTS="-Ddatasource.jdbcUrl=jdbc:postgresql://pg:5432/ggal1701 -Ddatasource.user=postgres -Ddatasource.password=postgres" -p 9000:8080 worker
// Para lanzar traefik
// sudo docker run -d -p 9090:8080 -p 8888:8888 --network public --name traefik -v $PWD/traefik.toml:/etc/traefik/traefik.toml -v /var/run/docker.sock:/var/run/docker.sock traefik


/*


Hello, everyone:

I have bitnami jenkins released in an ec2 instance of AWS. On the same machine I am launching my pipeline in which I use docker for several processes, one of them launching a database and a tomcat for a.war application. The fact is that I want to be able to access it from a subdomain or another domain (the application I launch in that docker container to be able to observe the changes).

For this I am using traefik and I can see all the containers running within the same EC2 network. I can also redirect it to a certain url. What I don't know is how to create a new subdomain to make this work. Traefic launched it with the following command (so you can see how I map the ports):

`sudo docker run -d -p 9090:8080 -p 8888:80 --network public --name traefik -v $PWD/traefik.toml:/etc/traefik/traefik.toml -v /var/run/docker.sock:/var/run/docker.sock traefik`

The traefic configuration file is the following in pastebin:[link to configuration file in pastebin](https://pastebin.com/wSzSHxDU)

From what I have seen, the bitnami application uses tomcat, correct me if not. I have the domain in freenom, since it is a test that I am doing.

It would be worthwhile to create a subdomain, as well as an extension: http://midominio.ga/test

Thank you very much, any help is welcome.

 */