#!groovy

/**
 *  Jenkinsfile: catalogador-tfg - Pipeline produccion
 *  @hugo-lorenzo-mato
 */

def appName = 'catalogador-tfg'
def nodeImage = 'node:6'
def gradleImage = 'frekele/gradle:4.2.1-jdk8'
def mavenChromeImage = 'markhobson/maven-chrome:latest'
def flywayImage = 'boxfuse/flyway:5'
def gradleImage2 = 'frekele/gradle:4.1-jdk8'


def db = null
def dbHostname = null
def dbName = 'ggal1701'
def dbUser = 'postgres'
def dbPassword = 'postgres'
def ipTomcat = null

def web = null
def webHostname = null

node() {
    try {
        stage('Git: Checkout') {
            echo 'Checking out git repository'
            sh "git config --global credential.helper 'cache --timeout=3600'"
            checkout scm
        }

        docker.image(nodeImage).inside("-u 0:0") {

            stage('Node: Instalando dependencias') {
                sh "cd appserver/application && npm -v && node -v && npm install"
            }
            stage('Node: Empaquetado web') {
                sh "cd appserver/application && pwd && npm run build"
            }

        }

        docker.image(gradleImage).inside("-u 0:0") {

            stage('Gradle: Compilando') {
                sh "cd appserver/application && gradle -v && gradle clean war"
            }
            stage ('Gradle: Pruebas Base (unidad - integracion)') {
                sh "cd appserver/application && gradle test"
            }

        }

        stage ('Despliegue: DB Init') {

            def dbImage = docker.build("catalogador/catalogador-tfg-db:${BRANCH_NAME}","--label jenkins ./database")
            dbHostname = "${BRANCH_NAME}-${BUILD_NUMBER}-db"
            dbHostname2 = "ggal1701.c0gqvbyobsaf.us-east-2.rds.amazonaws.com"
            db = dbImage.run("--network public --name ${dbHostname}")
            timeout(time: 3, unit: 'MINUTES') {
                sh "until [ \$(docker logs ${dbHostname} --tail 50 2>&1 | grep 'init process complete' | wc -l) -gt 0 ]; do sleep 10; done"
            }

        }


        stage ('Despliegue: App') {
            def webImage = docker.build("catalogador/catalogador-tfg-app:${BRANCH_NAME}","--label jenkins ./appserver")
            def webJavaOpts = "-Dspring.datasource.url=jdbc:postgresql://${dbHostname}:5432/${dbName} -Dspring.datasource.username=${dbUser} -Dspring.datasource.password=${dbPassword}"
            webHostname = "${BRANCH_NAME}-${BUILD_NUMBER}-app"
            web = webImage.run("--network public --link ${dbHostname} --name ${webHostname} -e JAVA_OPTS='${webJavaOpts}'")
            timeout(time: 3, unit: 'MINUTES') {
                sh "until [ \$(docker logs ${webHostname} --tail 50 2>&1 | grep 'Server startup' | wc -l) -gt 0 ]; do sleep 10; done"
            }
        }

        stage ('Hallae ip'){
            ipTomcat = sh "ipdocker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' ${webHostname}"
        }


        stage ('Pruebas Integración: Selenium') {

            docker.image(mavenChromeImage).inside("--network public -u 0:0 --link ${webHostname}") {
                sh "cd appserver/application/integration/seleniumTest && mvn -DargLine='-Durl=http://${ipTomcat}:8080' clean test"
            }
            junit 'appserver/application/integration/seleniumTest/target/surefire-reports/*.xml'
        }


        docker.image(gradleImage2).inside("--network public -u 0:0") {
            stage('Sonarqube: control de Calidad de Código') {
                sh "cd appserver/application && pwd && gradle sonarqube"
            }

        }


        docker.image(gradleImage).inside("--network public -u 0:0") {
            stage ('Nexus: entrega artefactos') {
                sh "cd appserver/application && gradle upload"

            }
        }


    } finally {
        web?.stop()
        db?.stop()
        //sh "docker rm \$(docker ps -a -q)"
        //sh "docker rmi \$(docker images -q)"
    }

}
//-Ddatasource.jdbcUrl=jdbc:postgresql://pg:5432/ggal1701 -Ddatasource.user=postgres -Ddatasource.password=postgres
// sudo docker run --network public --link pg --name tm -e JAVA_OPTS="-Ddatasource.jdbcUrl=jdbc:postgresql://pg:5432/ggal1701 -Ddatasource.user=postgres -Ddatasource.password=postgres" -p 9000:8080 worker