#!groovy

/**
 *  Jenkinsfile: catalogador-tfg - Pipeline produccion
 *  @hugo-lorenzo-mato
 */

def appName = 'catalogador-tfg'
def nodeImage = 'node:6'
def gradleImage = 'frekele/gradle:4.2.1-jdk8'
def mavenChromeImage = 'markhobson/maven-chrome:latest'
def flywayImage = 'boxfuse/flyway:5'

def db = null
def dbHostname = null
def dbName = 'ggal1701'
def dbUser = 'postgres'
def dbPassword = 'postgres'

def web = null
def webHostname = null

node() {
    try {
        stage('Git: Checkout') {
            echo 'Checking out git repository'
            sh "git config --global credential.helper 'cache --timeout=3600'"
            checkout scm
        }

        docker.image(nodeImage).inside("-u 0:0") {

            stage('Node: Instalando dependencias') {
                sh "cd appserver/application && npm -v && node -v && npm install"
            }
            stage('Node: Empaquetado web') {
                sh "cd appserver/application && $PWD && npm run build"
            }

        }

        docker.image(gradleImage).inside("-u 0:0") {

            stage('Gradle: Compilando') {
                sh "cd appserver/application && $PWD && gradle -v && $PWD && gradle clean war"
            }
            stage ('Gradle: Pruebas Base (unidad - integracion)') {
                sh "cd appserver/application && gradle test"
            }

            stage('Control de Calidad de Código') {
                /*
                        withSonarQubeEnv('sonarqubeName') {
                            sh "cd appserver/application && gradle --debug --info --stacktrace sonarqube"
                        }
                */
            }

        }

        stage ('Despliegue: DB Init') {

            def dbImage = docker.build("catalogador/catalogador-tfg-db:${BRANCH_NAME}","--label jenkins ./database")
            dbHostname = "${BRANCH_NAME}-${BUILD_NUMBER}-db"
            dbHostname2 = "ggal1701.c0gqvbyobsaf.us-east-2.rds.amazonaws.com"
            db = dbImage.run("--network public --name ${dbHostname}")
            timeout(time: 3, unit: 'MINUTES') {
                sh "until [ \$(docker logs ${dbHostname} --tail 50 2>&1 | grep 'init process complete' | wc -l) -gt 0 ]; do sleep 10; done"
            }

        }

/*
        stage ('Despliegue: App') {
            def webImage = docker.build("catalogador/catalogador-tfg-app:${BRANCH_NAME}","--label jenkins ./appserver")
            def webJavaOpts = "-Ddatasource.jdbcUrl=jdbc:postgresql://${dbHostname2}:5432/${dbName} -Ddatasource.user=${dbUser} -Ddatasource.password=${dbPassword}"
            webHostname = "${BRANCH_NAME}-${BUILD_NUMBER}-app"
            web = webImage.run("--network public --link ${dbHostname} --name ${webHostname} -e JAVA_OPTS='${webJavaOpts}'")
            timeout(time: 3, unit: 'MINUTES') {
                sh "until [ \$(docker logs ${webHostname} --tail 50 2>&1 | grep 'Server startup' | wc -l) -gt 0 ]; do sleep 10; done"
            }
        }

*/


        stage ('Despliegue: App') {
            def webImage = docker.build("catalogador/catalogador-tfg-app:${BRANCH_NAME}","--label jenkins ./appserver")
            webHostname = "${BRANCH_NAME}-${BUILD_NUMBER}-app"
            web = webImage.run("--network public --name ${webHostname}")
            timeout(time: 3, unit: 'MINUTES') {
                sh "until [ \$(docker logs ${webHostname} --tail 50 2>&1 | grep 'Server startup' | wc -l) -gt 0 ]; do sleep 10; done"
            }
        }
/*

        stage ('Pruebas Integración: Selenium') {

            docker.image(mavenChromeImage).inside("--network public -u 0:0 --link ${webHostname}") {
                sh "cd appserver/application/integration/seleniumTest && mvn -DargLine='-Durl=http://${webHostname}:8080' clean test"
            }
            junit 'appserver/application/integration/seleniumTest/target/surefire-reports/*.xml'
        }


        stage ('Nexus: Push Package'){
            withCredentials([file(credentialsId: mvnSettingsCredentialsID, variable: 'mvnSettings')]) {
                sh "mvn -Dmaven.repo.local=${pwd tmp: true}/m2repo -s ${mvnSettings} -DaltDeploymentRepository=nexus::default::${mvnSnapshotsURL} clean deploy"
            }
        }

*/
/*

        docker.image(gradleImage).inside("--network public -u 0:0") {
            stage ('Entrega: Nexus') {
                sh "cd appserver/application && gradle upload"

            }
        }
*/
/*
        stage ('Entrega: Nexus') {
            ARTIFACT = "catalogador-estable"
            VERSION = sh (
                    script: "echo \$(date +%Y%m%d%H%M)-\$(git rev-parse --short HEAD)",
                    returnStdout: true
            ).trim()
            sh "cd appserver/application && ./pack.sh ${ARTIFACT} ${VERSION}"
            docker.image(builderImage).inside("-u 0:0 --network public") {
                withCredentials([file(credentialsId: mvnSettingsCredentialsID, variable: 'mvnSettings')]) {
                    sh "cd appserver/application/build/libs  &&" +
                            " mvn deploy:deploy-file " +
                            "-DgroupId=ga.catalogador.fcpw " +
                            "-DartifactId=${ARTIFACT} " +
                            "-Dversion=${VERSION}"  +
                            "-Dpackaging=zip " +
                            "-Dfile=${ARTIFACT}.zip " +
                            "-s ${mvnSettings}" +
                            "-DrepositoryId=nexus" +
                            "-Durl=${mvnReleasesURL}"
                }
            }
        }

*/




    } finally {
        web?.stop()
        db?.stop()
        sh "docker rm \$(docker ps -a -q)"
        sh "docker rmi \$(docker images -q)"
    }

}
