#!groovy

/**
 *  Jenkinsfile: catalogador-tfg - Pipeline produccion
 *  @hugo-lorenzo-mato
 */

def appName = 'catalogador-tfg'
def nodeImage = 'node:6'
def gradleImage = 'frekele/gradle:4.2.1-jdk8'
def mavenChromeImage = 'markhobson/maven-chrome:latest'
def flywayImage = 'boxfuse/flyway:5'

def db = null
def dbHostname = null
def dbName = 'ggal1701'
def dbUser = 'postgres'
def dbPassword = 'postgres'

def web = null
def webHostname = null

node() {
    try {
        stage('Git: Checkout') {
            echo 'Checking out git repository'
            sh "git config --global credential.helper 'cache --timeout=3600'"
            checkout scm
        }

        docker.image(nodeImage).inside("-u 0:0") {
            stage('Node: Instalando dependencias') {
                sh "cd appserver/application && npm -v && node -v && npm install"
            }
            stage('Node: Empaquetado web') {
                sh "cd appserver/application && npm run build"
            }
        }

        docker.image(gradleImage).inside("-u 0:0") {
            stage('Gradle: Compilando') {
                sh "cd appserver/application && gradle -v && gradle war"
            }
            stage ('Gradle: Pruebas Base (unidad - integracion)') {
                sh "cd appserver/application && gradle test"
            }

            stage('Control de Calidad de C칩digo') {
                /*
                    withSonarQubeEnv('sonarqubeName') {
                        sh "cd appserver/application && gradle --debug --info --stacktrace sonarqube"
                    }
                */
            }


            stage ('Despliegue: DB Init') {
                sh "echo $PWD"
            /*
                def dbImage = docker.build("catalogador/catalogador-tfg:${BRANCH_NAME}","--label jenkins ./appserver/database")
                dbHostname = "${BRANCH_NAME}-${BUILD_NUMBER}-db"
                db = dbImage.run("--network public --name ${dbHostname}")
                timeout(time: 3, unit: 'MINUTES') {
                    sh "until [ \$(docker logs ${dbHostname} --tail 50 2>&1 | grep 'init process complete' | wc -l) -gt 0 ]; do sleep 10; done"
                }
            */
            }


            stage ('Despliegue: App') {
                sh "echo $PWD"
            /*
                def webImage = docker.build("enxenio/dekra-es-app:${BRANCH_NAME}","--label jenkins ./")
                def webJavaOpts = "-Ddatasource.jdbcUrl=jdbc:postgresql://${dbHostname}:5432/${dbName} " +
                        "-Ddatasource.user=${dbUser} " +
                        "-Ddatasource.password=${dbPassword}"
                webHostname = "${BRANCH_NAME}-${BUILD_NUMBER}-app"
                def proxyOpts = "-l 'traefik.frontend.rule=Host:${testingDomainName};PathPrefixStrip:/${webProxyPrefixPath}' " +
                        "-l 'traefik.port=8080'"
                web = webImage.run("--network public --link ${dbHostname} --name ${webHostname} -e JAVA_OPTS='${webJavaOpts}' ${proxyOpts}")
                timeout(time: 3, unit: 'MINUTES') {
                    sh "until [ \$(docker logs ${webHostname} --tail 50 2>&1 | grep 'Catalina start' | wc -l) -gt 0 ]; do sleep 10; done"
                }
            */
            }



            stage ('Pruebas Integraci칩n: Selenium') {
                sh "echo $PWD"
                /*
                docker.image(mavenChromeImage).inside("--network public -u 0:0 --link ${webHostname}") {
                    sh "cd appserver/application/integration/seleniumTest && mvn -DargLine='-Durl=http://${webHostname}' clean test"
                }
                */
                docker.image(mavenChromeImage).inside("-u 0:0") {
                    sh "cd appserver/application/integration/seleniumTest && mvn -DargLine='-Durl=http://catalogador.ga' clean test"
                }
                junit 'appserver/application/integration/seleniumTest/target/surefire-reports/*.xml'
            }


        }


    } finally {
        sh "echo 'Fallo en la ejecuci칩n del hilo ejecut치ndolo como: '"
        sh "whoami"
    }

}
